---
# High‑level process graph
#
# Each node defines a state in the process.  Nodes can be of three kinds:
#   - activity: an action that produces artifacts; flows directly to the next node
#   - decision: a branching point where conditions decide the next node
#   - gate: a hard checkpoint that requires evidence before continuing
#
# The `next` property defines transitions:
#   * For activities: `next` is a single node ID.
#   * For decisions: `next` is a list of branches with a `when` expression and the target `node`.
#   * For gates: `pass` and `fail` indicate next nodes.

nodes:
  - id: N-vision
    kind: activity
    description: >
      Define the product or project vision and high‑level objectives.  This includes
      understanding user needs, business goals and constraints.  Outputs include a
      written vision document and high‑level KPIs.
    produces:
      - docs/vision.md
    next: N-discovery

  - id: N-discovery
    kind: activity
    description: >
      Conduct user research, market analysis, and technical discovery.  Identify
      stakeholders, existing solutions, and constraints.  Capture findings in a
      discovery document.
    produces:
      - docs/discovery.md
    next: D-arch

  - id: D-arch
    kind: decision
    description: >
      Architecture & design decision.  Evaluate options against requirements and
      constraints, capture in an RFC and ADR.  Threat models and NFRs must be
      considered.  Branches are chosen based on risk and non‑functional coverage.
    consumes:
      - docs/vision.md
      - docs/discovery.md
      - requirements/nfr.yml
    produces:
      - artifacts/rfc/RFC-0001.md
      - artifacts/adr/ADR-0001.md
    next:
      - when: "risk <= medium and nfr_covered"
        node: G-design
      - when: "else"
        node: N-threatmodel

  - id: N-threatmodel
    kind: activity
    description: >
      Produce or update a threat model for the system.  Identify security and
      privacy risks, STRIDE categories, and mitigations.  Output goes into the
      threat folder.
    produces:
      - artifacts/threat/THREAT-0001.md
    next: D-arch

  - id: G-design
    kind: gate
    description: >
      Design gate.  Requires that core evidence (threat model, ADR, RFC, privacy
      sign‑off, and preliminary SLO budget) exists and meets acceptance criteria.
      If the gate fails, return to architecture decision.
    requires:
      - artifact: artifacts/threat/THREAT-0001.md
      - artifact: artifacts/adr/ADR-0001.md
      - review: privacy.signoff == true
      - metric: slo.target_availability >= 99.9
    pass: N-planning
    fail: D-arch

  - id: N-planning
    kind: activity
    description: >
      Create a development roadmap, resource plan, and rollout strategy.  Plan
      milestones and allocate capacity.  Outputs include a roadmap and a
      resource plan.
    produces:
      - artifacts/roadmap.md
      - artifacts/resource_plan.md
    next: N-build

  - id: N-build
    kind: activity
    description: >
      Implementation phase.  Write code, infrastructure as code, tests, and
      integrate CI.  Produce reproducible builds and SBOM.  At this stage,
      continuous integration must pass.
    produces:
      - artifacts/tests/
      - artifacts/sbom/cyclonedx.json
    next: G-verify

  - id: G-verify
    kind: gate
    description: >
      Verification gate.  Requires unit/integration/end‑to‑end tests to pass,
      security scans to show zero critical vulnerabilities, and performance
      measurements to meet non‑functional targets.  Failure leads to a fix
      iteration.
    requires:
      - metric: test.pass_rate >= 0.99
      - metric: security.critical_vulns == 0
      - metric: performance.p95_latency_ms <= target
    pass: E-experiment
    fail: N-fix

  - id: N-fix
    kind: activity
    description: >
      Address defects uncovered during verification, including test failures,
      vulnerabilities and performance regressions.  Document fixes and
      improvements.
    produces:
      - artifacts/fix_report.md
    next: N-build

  - id: E-experiment
    kind: decision
    description: >
      Run experiments (A/B tests, feature flags, canaries) and gather telemetry.
      Based on lift and error budgets, decide to proceed to release, fix issues,
      or revisit architecture/design.
    telemetry:
      - ab.lift
      - error_budget.burn_rate
    next:
      - when: "lift >= min and burn_rate <= max"
        node: N-release
      - when: "burn_rate > max"
        node: N-fix
      - when: "lift < min"
        node: D-arch

  - id: N-release
    kind: activity
    description: >
      Progressive rollout.  Create a rollout plan with stages (canary, beta,
      general availability) and fallback procedures.  Coordinate with operations
      and customer support.
    produces:
      - artifacts/rollout/PLAN-0001.md
    next: O-operate

  - id: O-operate
    kind: activity
    description: >
      Operate the system in production.  Monitor SLOs, maintain on‑call
      procedures, handle incidents, and capture learnings in postmortems.
    produces:
      - artifacts/postmortems/PM-0001.md
    next: D-calibrate

  - id: D-calibrate
    kind: decision
    description: >
      Periodic recalibration.  At defined intervals (e.g. quarterly, after
      major releases or significant incidents), review the process, requirements
      and metrics.  If assumptions have changed or drift is detected, loop back
      to architecture; otherwise, begin a new iteration by redefining vision.
    next:
      - when: "recalibration_needed"
        node: D-arch
      - when: "else"
        node: N-vision